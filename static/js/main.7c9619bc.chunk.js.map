{"version":3,"sources":["services/socket.js","Map.js","Flights.js","reportWebVitals.js","index.js"],"names":["socket","socketIOClient","path","Map","displacementsList","flights","map","flight","Displacement","code","useState","airplanePositions","setAirplanePositions","positionPoints","setPositionPoints","useEffect","on","data","oldArray","console","log","logPositions","loggedPositions","PaintPosition","logAirplanePositions","Object","keys","key","DisplayAirplane","airplane","MapContainer","center","zoom","scrollWheelZoom","TileLayer","attribution","url","displacement","origin","destination","Circle","radius","Polyline","positions","position","pathOptions","fillColor","myIcon","L","icon","iconUrl","iconSize","iconAnchor","size","Marker","Popup","Flights","setFlights","emit","flightList","ShowFlight","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7c9619bc.chunk.js","sourcesContent":["import socketIOClient from \"socket.io-client\";\n\nexport const socket = socketIOClient(\"wss://tarea-3-websocket.2021-1.tallerdeintegracion.cl/\", {\n        path: \"/flights\"\n      });","import React, { useEffect, useState, Component } from 'react';\nimport {socket} from \"./services/socket\";\nimport leaflet, { MapContainer, TileLayer, Marker, Popup, Polyline, Circle} from 'react-leaflet'\nimport L from \"leaflet\";\n\n//component chat recibe userrname\nimport './Map.css';\n\nexport default function Map({flights}) {\n\n  const displacementsList = flights.map((flight) =>\n        <Displacement key={flight.code} flight={flight}/>\n  );\n\n  const [airplanePositions, setAirplanePositions] = useState({});\n\n  const [positionPoints, setPositionPoints] = useState([]);\n\n  useEffect(() => {\n    socket.on(\"POSITION\", data => {\n      logPositions(data);\n    });\n\n  }, []);\n\n  function logPositions(data) {\n    setPositionPoints( oldArray => [...oldArray, data])\n    airplanePositions[data.code] = data;\n    console.log(airplanePositions)\n    setAirplanePositions({...airplanePositions});\n  }\n\n  const loggedPositions = positionPoints.map((flight) =>\n        <PaintPosition flight={flight}/>\n  );\n\n  const logAirplanePositions = Object.keys(airplanePositions).map((key) =>\n    <DisplayAirplane airplane={airplanePositions[key]}/>\n  );\n  \n    \n  \n\n  return (\n    <div>\n      <p>MAPA \"En vivo\"</p>\n        <MapContainer center={[51.505, -0.09]} zoom={2} scrollWheelZoom={false}>\n          <TileLayer\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          />\n          {logAirplanePositions}\n          {displacementsList}\n          {loggedPositions}\n        </MapContainer>\n    </div>\n      \n  );\n}\n\n\nfunction Displacement({flight}) {\n    const displacement = [flight.origin, flight.destination];\n    return (\n      <div>\n        <Circle center={flight.origin} radius={200} />\n        <Polyline positions={displacement} />\n        <Circle center={flight.destination} radius={1000} />\n      </div>\n    )\n  }\n\nfunction PaintPosition({flight}) {\n  const fillRedOptions = { fillColor: 'black' };\n  return (\n    <Circle center={flight.position} pathOptions={fillRedOptions} radius={200} />\n  )\n}\n\nfunction DisplayAirplane({airplane}) {\n\n  const size = 50\n\n  const myIcon = L.icon({\n    iconUrl: 'https://upload.wikimedia.org/wikipedia/commons/c/c2/20_airtransportation.svg',\n    iconSize  : [size, size],\n    iconAnchor: [size/2, size + 9],\n  });\n\n  return (\n    <Marker position={airplane.position} icon={myIcon}>\n            <Popup>\n              Airplane: {airplane.code}\n            </Popup>\n    </Marker>\n  )\n}\n","import React, { useEffect, useState, Component } from 'react';\nimport {socket} from \"./services/socket\";\nimport Map from './Map';\n\n\n\n\nexport default function Flights() {\n  const [flights, setFlights] = useState([]);\n  const [flightsByCode, setFlightsByCode] = useState({});\n\n  useEffect(() => {\n    socket.emit(\"FLIGHTS\")\n    socket.on(\"FLIGHTS\", data => {\n      setFlights(data);\n    });\n\n  }, []);\n\n  function getFlights() {\n    socket.emit(\"FLIGHTS\")\n  }\n\n  const flightList = flights.map((flight) =>\n        <li>\n            <ShowFlight flight={flight}/>\n        </li>\n    );\n\n  return (\n    <div>\n      <Map flights={flights}/>\n      <p> INFORMACION DE LOS VUELOS </p>\n      <button onClick={() => getFlights()}>\n        Refresh Flights\n      </button>\n      <ul>\n        {flightList}\n      </ul>\n    </div>\n  );\n}\n\nfunction ShowFlight({flight}) {\n  return flight.code\n}\n\n\n\n\n//component chat recibe userrname\n//component mapa\n//component flights info\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Flights from './Flights';\nimport Chat from './Chat';\nimport Map from './Map';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Flights />\n    <br/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}