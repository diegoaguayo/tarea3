{"version":3,"sources":["services/socket.js","Map.js","Flights.js","reportWebVitals.js","index.js"],"names":["socket","socketIOClient","path","Map","displacementsList","flights","map","flight","Displacement","code","MapContainer","center","zoom","scrollWheelZoom","TileLayer","attribution","url","Marker","position","Popup","displacement","origin","destination","Circle","radius","Polyline","positions","Flights","useState","setFlights","useEffect","emit","on","data","flightList","ShowFlight","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sNAEaA,E,MAASC,GAAe,yDAA0D,CACvFC,KAAM,a,+DCIC,SAASC,EAAT,GAAyB,IAEhCC,EAF+B,EAAVC,QAEOC,KAAI,SAACC,GAAD,OAChC,cAACC,EAAD,CAAgCD,OAAQA,GAArBA,EAAOE,SAI9B,OACE,gCACE,+CACA,eAACC,EAAA,EAAD,CAAcC,OAAQ,CAAC,QAAS,KAAOC,KAAM,EAAGC,iBAAiB,EAAjE,UACE,cAACC,EAAA,EAAD,CACEC,YAAY,yEACZC,IAAI,uDAEN,cAACC,EAAA,EAAD,CAAQC,SAAU,CAAC,QAAS,KAA5B,SACE,eAACC,EAAA,EAAD,mCACuB,uBADvB,6BAIDf,QAQX,SAASI,EAAT,GAAiC,IAAVD,EAAS,EAATA,OACba,EAAe,CAACb,EAAOc,OAAQd,EAAOe,aAC5C,OACE,gCACE,cAACC,EAAA,EAAD,CAAQZ,OAAQJ,EAAOc,OAAQG,OAAQ,MACvC,cAACC,EAAA,EAAD,CAAUC,UAAWN,IACrB,cAACG,EAAA,EAAD,CAAQZ,OAAQJ,EAAOe,YAAaE,OAAQ,SClCrC,SAASG,IACtB,MAA8BC,mBAAS,IAAvC,mBAAOvB,EAAP,KAAgBwB,EAAhB,KACA,EAA0CD,mBAAS,IAAnD,6BAEAE,qBAAU,WACR9B,EAAO+B,KAAK,WACZ/B,EAAOgC,GAAG,WAAW,SAAAC,GACnBJ,EAAWI,QAGZ,IAMH,IAAMC,EAAa7B,EAAQC,KAAI,SAACC,GAAD,OACzB,6BACI,cAAC4B,EAAD,CAAY5B,OAAQA,SAI9B,OACE,gCACE,cAAC,EAAD,CAAKF,QAASA,IACd,4DACA,wBAAQ+B,QAAS,WAbnBpC,EAAO+B,KAAK,YAaV,6BAGA,6BACGG,OAMT,SAASC,EAAT,GACE,OAD4B,EAAT5B,OACLE,K,gBC5ChB,IAYe4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCCdQ,IAASC,OACP,eAAC,IAAMC,WAAP,WACE,cAACrB,EAAD,IACA,0BAEFsB,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7ea765dc.chunk.js","sourcesContent":["import socketIOClient from \"socket.io-client\";\n\nexport const socket = socketIOClient(\"wss://tarea-3-websocket.2021-1.tallerdeintegracion.cl/\", {\n        path: \"/flights\"\n      });","import React, { useEffect, useState, Component } from 'react';\nimport {socket} from \"./services/socket\";\nimport { MapContainer, TileLayer, Marker, Popup, Polyline, Circle } from 'react-leaflet'\n\n//component chat recibe userrname\nimport './Map.css';\n\nexport default function Map({flights}) {\n\n  const displacementsList = flights.map((flight) =>\n        <Displacement key={flight.code} flight={flight}/>\n  );\n    \n\n    return (\n      <div>\n        <p>MAPA \"En vivo\"</p>\n        <MapContainer center={[51.505, -0.09]} zoom={2} scrollWheelZoom={false}>\n          <TileLayer\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          />\n          <Marker position={[51.505, -0.09]}>\n            <Popup>\n              A pretty CSS3 popup. <br /> Easily customizable.\n            </Popup>\n          </Marker>\n          {displacementsList}\n        </MapContainer>\n      </div>\n      \n    );\n  }\n\n\nfunction Displacement({flight}) {\n    const displacement = [flight.origin, flight.destination];\n    return (\n      <div>\n        <Circle center={flight.origin} radius={200} />\n        <Polyline positions={displacement} />\n        <Circle center={flight.destination} radius={1000} />\n      </div>\n    )\n  }\n\n\n\n\n\n\n\n\n\n\n\n  /*\n      const [flights, setFlights] = useState([]);\n    const [count, setCount] = useState(0);\n  \n    useEffect(() => {\n      socket.on(\"FLIGHTS\", data => {\n        setFlights(JSON.stringify(data));\n      });\n  \n      socket.on(\"POSITION\", data => {\n        setFlights(JSON.stringify(data));\n      });\n  \n    }, []);\n  \n  */","import React, { useEffect, useState, Component } from 'react';\nimport {socket} from \"./services/socket\";\nimport Map from './Map';\n\n\n\n\nexport default function Flights() {\n  const [flights, setFlights] = useState([]);\n  const [flightsByCode, setFlightsByCode] = useState({});\n\n  useEffect(() => {\n    socket.emit(\"FLIGHTS\")\n    socket.on(\"FLIGHTS\", data => {\n      setFlights(data);\n    });\n\n  }, []);\n\n  function getFlights() {\n    socket.emit(\"FLIGHTS\")\n  }\n\n  const flightList = flights.map((flight) =>\n        <li>\n            <ShowFlight flight={flight}/>\n        </li>\n    );\n\n  return (\n    <div>\n      <Map flights={flights}/>\n      <p> INFORMACION DE LOS VUELOS </p>\n      <button onClick={() => getFlights()}>\n        Refresh Flights\n      </button>\n      <ul>\n        {flightList}\n      </ul>\n    </div>\n  );\n}\n\nfunction ShowFlight({flight}) {\n  return flight.code\n}\n\n\n\n\n//component chat recibe userrname\n//component mapa\n//component flights info\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Flights from './Flights';\nimport Chat from './Chat';\nimport Map from './Map';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Flights />\n    <br/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}